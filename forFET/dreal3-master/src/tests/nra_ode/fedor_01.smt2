(set-logic QF_NRA_ODE)
(declare-fun local_time () Real)
(declare-fun local_time_0_0 () Real)
(declare-fun local_time_0_t () Real)
(declare-fun s1 () Real)
(declare-fun s1_0_0 () Real)
(declare-fun s1_0_t () Real)
(assert (>= s1_0_0  0))
(assert (>= s1_0_t  0))
(assert (<= s1_0_0  500))
(assert (<= s1_0_t  500))
(declare-fun s2 () Real)
(declare-fun s2_0_0 () Real)
(declare-fun s2_0_t () Real)
(assert (>= s2_0_0  0))
(assert (>= s2_0_t  0))
(assert (<= s2_0_0  500))
(assert (<= s2_0_t  500))
(declare-fun tau () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(assert (>= tau_0_0  0))
(assert (>= tau_0_t  0))
(assert (<= tau_0_0  60))
(assert (<= tau_0_t  60))
(declare-fun v01 () Real)
(declare-fun v01_0_0 () Real)
(declare-fun v01_0_t () Real)
(assert (>= v01_0_0  0))
(assert (>= v01_0_t  0))
(assert (<= v01_0_0  50))
(assert (<= v01_0_t  50))
(declare-fun v02 () Real)
(declare-fun v02_0_0 () Real)
(declare-fun v02_0_t () Real)
(assert (>= v02_0_0  0))
(assert (>= v02_0_t  0))
(assert (<= v02_0_0  50))
(assert (<= v02_0_t  50))
(declare-fun v1 () Real)
(declare-fun v1_0_0 () Real)
(declare-fun v1_0_t () Real)
(assert (>= v1_0_0  0))
(assert (>= v1_0_t  0))
(assert (<= v1_0_0  50))
(assert (<= v1_0_t  50))
(declare-fun v2 () Real)
(declare-fun v2_0_0 () Real)
(declare-fun v2_0_t () Real)
(assert (>= v2_0_0  0))
(assert (>= v2_0_t  0))
(assert (<= v2_0_0  50))
(assert (<= v2_0_t  50))
(declare-fun time_0 () Real)
(assert (>= time_0  0))
(assert (<= time_0  60))
(define-ode flow_1
    ((= d/dt[s1] (+ 11.12(* 3 tau)))
     (= d/dt[s2]  11.12)
     (= d/dt[tau]  1.0)
     (= d/dt[v01]  0)
     (= d/dt[v02]  0)
     (= d/dt[v1]  3)
     (= d/dt[v2]  0.0)
     (= d/dt[local_time] 1.0)))
(assert (and
            (= s1_0_0 0)
            (= s2_0_0 (* 11.12 2.0))
            (= v1_0_0 11.12)
            (= v2_0_0 11.12)
            (= tau_0_0 0)
            (= [s1_0_t s2_0_t tau_0_t v01_0_t v02_0_t v1_0_t v2_0_t local_time_0_t]
                (integral 0.0 time_0 [s1_0_0 s2_0_0 tau_0_0 v01_0_0 v02_0_0 v1_0_0 v2_0_0 local_time_0_0] flow_1))
            (forall_t 1 [0 time_0] (< s1_0_t (+ s2_0_t (* v2_0_t 2.0))))
            (= local_time_0_0  0)
            (= local_time_0_t  6)))
(check-sat)
(exit)
