(set-logic QF_NRA_ODE)

(declare-fun v7 () Int [0.000000, 1.000000])
(declare-fun v6 () Int [0.000000, 1.000000])
(declare-fun v5 () Int [0.000000, 1.000000])
(declare-fun v4 () Int [0.000000, 1.000000])
(declare-fun v3 () Int [0.000000, 1.000000])
(declare-fun v1 () Int [0.000000, 1.000000])

(declare-fun tau () Real [0.000000, 1.000000])
(declare-fun r3 () Real [0.000000, 1.000000])
(declare-fun r2 () Real [0.000000, 1.000000])
(declare-fun r1 () Real [0.000000, 1.000000])

(declare-fun lam_3 () Int [0.000000, 2.000000])
(declare-fun lam_2 () Int [0.000000, 2.000000])
(declare-fun lam_1 () Int [0.000000, 2.000000])

(declare-fun dK_dt () Real [-2.000000, 2.000000])

(declare-fun ch1 () Int [0.000000, 1.000000])

(declare-fun c8 () Int [1.000000, 2.000000])
(declare-fun c7 () Int [1.000000, 2.000000])
(declare-fun c6 () Int [1.000000, 2.000000])
(declare-fun c5 () Int [1.000000, 2.000000])
(declare-fun c2 () Int [1.000000, 2.000000])

(declare-fun K () Real [0.000000, 1.000000])
(declare-fun C () Real [0.000000, 1.000000])
(declare-fun B () Real [0.000000, 1.000000])
(declare-fun A () Real [0.000000, 1.000000])

(declare-fun v7_0_0 () Int [0.000000, 1.000000])
(declare-fun v7_0_t () Int [0.000000, 1.000000])
(declare-fun v7_1_0 () Int [0.000000, 1.000000])
(declare-fun v7_1_t () Int [0.000000, 1.000000])
(declare-fun v6_0_0 () Int [0.000000, 1.000000])
(declare-fun v6_0_t () Int [0.000000, 1.000000])
(declare-fun v6_1_0 () Int [0.000000, 1.000000])
(declare-fun v6_1_t () Int [0.000000, 1.000000])
(declare-fun v5_0_0 () Int [0.000000, 1.000000])
(declare-fun v5_0_t () Int [0.000000, 1.000000])
(declare-fun v5_1_0 () Int [0.000000, 1.000000])
(declare-fun v5_1_t () Int [0.000000, 1.000000])
(declare-fun v4_0_0 () Int [0.000000, 1.000000])
(declare-fun v4_0_t () Int [0.000000, 1.000000])
(declare-fun v4_1_0 () Int [0.000000, 1.000000])
(declare-fun v4_1_t () Int [0.000000, 1.000000])
(declare-fun v3_0_0 () Int [0.000000, 1.000000])
(declare-fun v3_0_t () Int [0.000000, 1.000000])
(declare-fun v3_1_0 () Int [0.000000, 1.000000])
(declare-fun v3_1_t () Int [0.000000, 1.000000])
(declare-fun v1_0_0 () Int [0.000000, 1.000000])
(declare-fun v1_0_t () Int [0.000000, 1.000000])
(declare-fun v1_1_0 () Int [0.000000, 1.000000])
(declare-fun v1_1_t () Int [0.000000, 1.000000])

(declare-fun tau_0_0 () Real [0.000000, 1.000000])
(declare-fun tau_0_t () Real [0.000000, 1.000000])
(declare-fun tau_1_0 () Real [0.000000, 1.000000])
(declare-fun tau_1_t () Real [0.000000, 1.000000])
(declare-fun r3_0_0 () Real [0.000000, 1.000000])
(declare-fun r3_0_t () Real [0.000000, 1.000000])
(declare-fun r3_1_0 () Real [0.000000, 1.000000])
(declare-fun r3_1_t () Real [0.000000, 1.000000])
(declare-fun r2_0_0 () Real [0.000000, 1.000000])
(declare-fun r2_0_t () Real [0.000000, 1.000000])
(declare-fun r2_1_0 () Real [0.000000, 1.000000])
(declare-fun r2_1_t () Real [0.000000, 1.000000])
(declare-fun r1_0_0 () Real [0.000000, 1.000000])
(declare-fun r1_0_t () Real [0.000000, 1.000000])
(declare-fun r1_1_0 () Real [0.000000, 1.000000])
(declare-fun r1_1_t () Real [0.000000, 1.000000])

(declare-fun lam_3_0_0 () Int [0.000000, 2.000000])
(declare-fun lam_3_0_t () Int [0.000000, 2.000000])
(declare-fun lam_3_1_0 () Int [0.000000, 2.000000])
(declare-fun lam_3_1_t () Int [0.000000, 2.000000])
(declare-fun lam_2_0_0 () Int [0.000000, 2.000000])
(declare-fun lam_2_0_t () Int [0.000000, 2.000000])
(declare-fun lam_2_1_0 () Int [0.000000, 2.000000])
(declare-fun lam_2_1_t () Int [0.000000, 2.000000])
(declare-fun lam_1_0_0 () Int [0.000000, 2.000000])
(declare-fun lam_1_0_t () Int [0.000000, 2.000000])
(declare-fun lam_1_1_0 () Int [0.000000, 2.000000])
(declare-fun lam_1_1_t () Int [0.000000, 2.000000])

(declare-fun dK_dt_0_0 () Real [-2.000000, 2.000000])
(declare-fun dK_dt_0_t () Real [-2.000000, 2.000000])
(declare-fun dK_dt_1_0 () Real [-2.000000, 2.000000])
(declare-fun dK_dt_1_t () Real [-2.000000, 2.000000])

(declare-fun ch1_0_0 () Int [0.000000, 1.000000])
(declare-fun ch1_0_t () Int [0.000000, 1.000000])
(declare-fun ch1_1_0 () Int [0.000000, 1.000000])
(declare-fun ch1_1_t () Int [0.000000, 1.000000])
(declare-fun c8_0_0 () Int [1.000000, 2.000000])
(declare-fun c8_0_t () Int [1.000000, 2.000000])
(declare-fun c8_1_0 () Int [1.000000, 2.000000])
(declare-fun c8_1_t () Int [1.000000, 2.000000])
(declare-fun c7_0_0 () Int [1.000000, 2.000000])
(declare-fun c7_0_t () Int [1.000000, 2.000000])
(declare-fun c7_1_0 () Int [1.000000, 2.000000])
(declare-fun c7_1_t () Int [1.000000, 2.000000])
(declare-fun c6_0_0 () Int [1.000000, 2.000000])
(declare-fun c6_0_t () Int [1.000000, 2.000000])
(declare-fun c6_1_0 () Int [1.000000, 2.000000])
(declare-fun c6_1_t () Int [1.000000, 2.000000])
(declare-fun c5_0_0 () Int [1.000000, 2.000000])
(declare-fun c5_0_t () Int [1.000000, 2.000000])
(declare-fun c5_1_0 () Int [1.000000, 2.000000])
(declare-fun c5_1_t () Int [1.000000, 2.000000])
(declare-fun c2_0_0 () Int [1.000000, 2.000000])
(declare-fun c2_0_t () Int [1.000000, 2.000000])
(declare-fun c2_1_0 () Int [1.000000, 2.000000])
(declare-fun c2_1_t () Int [1.000000, 2.000000])

(declare-fun K_0_0 () Real [0.000000, 1.000000])
(declare-fun K_0_t () Real [0.000000, 1.000000])
(declare-fun K_1_0 () Real [0.000000, 1.000000])
(declare-fun K_1_t () Real [0.000000, 1.000000])
(declare-fun C_0_0 () Real [0.000000, 1.000000])
(declare-fun C_0_t () Real [0.000000, 1.000000])
(declare-fun C_1_0 () Real [0.000000, 1.000000])
(declare-fun C_1_t () Real [0.000000, 1.000000])
(declare-fun B_0_0 () Real [0.000000, 1.000000])
(declare-fun B_0_t () Real [0.000000, 1.000000])
(declare-fun B_1_0 () Real [0.000000, 1.000000])
(declare-fun B_1_t () Real [0.000000, 1.000000])
(declare-fun A_0_0 () Real [0.000000, 1.000000])
(declare-fun A_0_t () Real [0.000000, 1.000000])
(declare-fun A_1_0 () Real [0.000000, 1.000000])
(declare-fun A_1_t () Real [0.000000, 1.000000])
(declare-fun time_0 () Real [0.000000, 1.000000])
(declare-fun time_1 () Real [0.000000, 1.000000])
(declare-fun mode_0 () Real [1.000000, 2.000000])
(declare-fun mode_1 () Real [1.000000, 2.000000])

(define-ode flow_1 ((= d/dt[A] (+ (- (* r3 (+ (* ch1 (exp (* -1000 (^ lam_3 2)))) (* (* (* c7 (- 1 ch1)) (exp (* -1000 (^ lam_2 2)))) v7))) (* (* (* (exp (* -1000 (^ lam_1 2))) r1) (+ (- 1 v1) (* K v1))) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2))))))) (* (* (* (* r2 (- (exp (* -1000 (^ lam_3 2))) (* (exp (* -1000 (^ lam_2 2))) (- (* c5 v5) (* c6 v6))))) (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (+ (* v3 (^ K 2)) (* (- 1 v3) K))) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2)))))))) (= d/dt[B] (+ (- (* r3 (+ (* ch1 (exp (* -1000 (^ (- lam_3 1) 2)))) (* (* (* c7 (- 1 ch1)) (exp (* -1000 (^ (- lam_2 1) 2)))) v7))) (* (* (* (exp (* -1000 (^ (- lam_1 1) 2))) r1) (+ (- 1 v1) (* K v1))) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2))))))) (* (* (* (* r2 (- (exp (* -1000 (^ (- lam_3 1) 2))) (* (exp (* -1000 (^ (- lam_2 1) 2))) (- (* c5 v5) (* c6 v6))))) (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (+ (* v3 (^ K 2)) (* (- 1 v3) K))) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2)))))))) (= d/dt[C] (+ (- (* r3 (+ (* ch1 (exp (* -1000 (^ (- lam_3 2) 2)))) (* (* (* c7 (- 1 ch1)) (exp (* -1000 (^ (- lam_2 2) 2)))) v7))) (* (* (* (exp (* -1000 (^ (- lam_1 2) 2))) r1) (+ (- 1 v1) (* K v1))) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2))))))) (* (* (* (* r2 (- (exp (* -1000 (^ (- lam_3 2) 2))) (* (exp (* -1000 (^ (- lam_2 2) 2))) (- (* c5 v5) (* c6 v6))))) (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (+ (* v3 (^ K 2)) (* (- 1 v3) K))) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2)))))))) (= d/dt[K] (- (+ (* c8 r3) (* (* (* r1 (- c2 v1)) (+ (- 1 v1) (* K v1))) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2))))))) (* (* (* (* r2 (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (+ (* v3 (^ K 2)) (* (- 1 v3) K))) (- (+ (- 1 v3) (* 2 v3)) v4)) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2)))))))) (= d/dt[c2] 0) (= d/dt[c5] 0) (= d/dt[c6] 0) (= d/dt[c7] 0) (= d/dt[c8] 0) (= d/dt[ch1] 0) (= d/dt[dK_dt] (* (- (* (* (* r1 v1) (- c2 v1)) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2)))))) (* (* (* (* r2 (+ (- 1 v3) (* (* 2 K) v3))) (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (- (+ (- 1 v3) (* 2 v3)) v4)) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2))))))) (- (+ (* c8 r3) (* (* (* r1 (- c2 v1)) (+ (- 1 v1) (* K v1))) (+ (+ (* A (exp (* -1000 (^ lam_1 2)))) (* B (exp (* -1000 (^ (- lam_1 1) 2))))) (* C (exp (* -1000 (^ (- lam_1 2) 2))))))) (* (* (* (* r2 (+ (- 1 v5) (* v5 (^ (+ (+ (* A (exp (* -1000 (^ lam_2 2)))) (* B (exp (* -1000 (^ (- lam_2 1) 2))))) (* C (exp (* -1000 (^ (- lam_2 2) 2))))) c5)))) (+ (* v3 (^ K 2)) (* (- 1 v3) K))) (- (+ (- 1 v3) (* 2 v3)) v4)) (+ (+ (* A (exp (* -1000 (^ lam_3 2)))) (* B (exp (* -1000 (^ (- lam_3 1) 2))))) (* C (exp (* -1000 (^ (- lam_3 2) 2))))))))) (= d/dt[lam_1] 0) (= d/dt[lam_2] 0) (= d/dt[lam_3] 0) (= d/dt[r1] 0) (= d/dt[r2] 0) (= d/dt[r3] 0) (= d/dt[tau] 1) (= d/dt[v1] 0) (= d/dt[v3] 0) (= d/dt[v4] 0) (= d/dt[v5] 0) (= d/dt[v6] 0) (= d/dt[v7] 0)))


(assert (and (and (= dK_dt_0_0 0) (= K_0_0 0) (> r2_0_0 0) (> r1_0_0 0)) (= mode_0 1) (= v7_0_t (+ v7_0_0 (* 0 time_0))) (= v6_0_t (+ v6_0_0 (* 0 time_0))) (= v5_0_t (+ v5_0_0 (* 0 time_0))) (= v4_0_t (+ v4_0_0 (* 0 time_0))) (= v3_0_t (+ v3_0_0 (* 0 time_0))) (= v1_0_t (+ v1_0_0 (* 0 time_0))) (= tau_0_t (+ tau_0_0 (* 1 time_0))) (= r3_0_t (+ r3_0_0 (* 0 time_0))) (= r2_0_t (+ r2_0_0 (* 0 time_0))) (= r1_0_t (+ r1_0_0 (* 0 time_0))) (= lam_3_0_t (+ lam_3_0_0 (* 0 time_0))) (= lam_2_0_t (+ lam_2_0_0 (* 0 time_0))) (= lam_1_0_t (+ lam_1_0_0 (* 0 time_0))) (= ch1_0_t (+ ch1_0_0 (* 0 time_0))) (= c8_0_t (+ c8_0_0 (* 0 time_0))) (= c7_0_t (+ c7_0_0 (* 0 time_0))) (= c6_0_t (+ c6_0_0 (* 0 time_0))) (= c5_0_t (+ c5_0_0 (* 0 time_0))) (= c2_0_t (+ c2_0_0 (* 0 time_0))) (= [A_0_t B_0_t C_0_t K_0_t c2_0_t c5_0_t c6_0_t c7_0_t c8_0_t ch1_0_t dK_dt_0_t lam_1_0_t lam_2_0_t lam_3_0_t r1_0_t r2_0_t r3_0_t tau_0_t v1_0_t v3_0_t v4_0_t v5_0_t v6_0_t v7_0_t] (integral 0. time_0 [A_0_0 B_0_0 C_0_0 K_0_0 c2_0_0 c5_0_0 c6_0_0 c7_0_0 c8_0_0 ch1_0_0 dK_dt_0_0 lam_1_0_0 lam_2_0_0 lam_3_0_0 r1_0_0 r2_0_0 r3_0_0 tau_0_0 v1_0_0 v3_0_0 v4_0_0 v5_0_0 v6_0_0 v7_0_0] flow_1)) (= mode_0 1) (forall_t 1 [0 time_0] (>= dK_dt_0_t 0)) (>= dK_dt_0_t 0) (>= dK_dt_0_0 0) (= mode_1 2) (> K_0_t 0) (= dK_dt_0_t 0) (= lam_3_1_0 lam_3_0_t) (= lam_2_1_0 lam_2_0_t) (= lam_1_1_0 lam_1_0_t) (= v7_1_0 v7_0_t) (= v6_1_0 v6_0_t) (= v5_1_0 v5_0_t) (= v4_1_0 v4_0_t) (= v3_1_0 v3_0_t) (= v1_1_0 v1_0_t) (= ch1_1_0 ch1_0_t) (= c8_1_0 c8_0_t) (= c7_1_0 c7_0_t) (= c6_1_0 c6_0_t) (= c5_1_0 c5_0_t) (= c2_1_0 c2_0_t) (= r3_1_0 r3_0_t) (= r2_1_0 r2_0_t) (= r1_1_0 r1_0_t) (= dK_dt_1_0 dK_dt_0_t) (= K_1_0 K_0_t) (= C_1_0 C_0_t) (= B_1_0 B_0_t) (= A_1_0 A_0_t) (= tau_1_0 tau_0_t) (= v7_1_t (+ v7_1_0 (* 0 time_1))) (= v6_1_t (+ v6_1_0 (* 0 time_1))) (= v5_1_t (+ v5_1_0 (* 0 time_1))) (= v4_1_t (+ v4_1_0 (* 0 time_1))) (= v3_1_t (+ v3_1_0 (* 0 time_1))) (= v1_1_t (+ v1_1_0 (* 0 time_1))) (= tau_1_t (+ tau_1_0 (* 1 time_1))) (= r3_1_t (+ r3_1_0 (* 0 time_1))) (= r2_1_t (+ r2_1_0 (* 0 time_1))) (= r1_1_t (+ r1_1_0 (* 0 time_1))) (= lam_3_1_t (+ lam_3_1_0 (* 0 time_1))) (= lam_2_1_t (+ lam_2_1_0 (* 0 time_1))) (= lam_1_1_t (+ lam_1_1_0 (* 0 time_1))) (= ch1_1_t (+ ch1_1_0 (* 0 time_1))) (= c8_1_t (+ c8_1_0 (* 0 time_1))) (= c7_1_t (+ c7_1_0 (* 0 time_1))) (= c6_1_t (+ c6_1_0 (* 0 time_1))) (= c5_1_t (+ c5_1_0 (* 0 time_1))) (= c2_1_t (+ c2_1_0 (* 0 time_1))) (= [A_1_t B_1_t C_1_t K_1_t c2_1_t c5_1_t c6_1_t c7_1_t c8_1_t ch1_1_t dK_dt_1_t lam_1_1_t lam_2_1_t lam_3_1_t r1_1_t r2_1_t r3_1_t tau_1_t v1_1_t v3_1_t v4_1_t v5_1_t v6_1_t v7_1_t] (integral 0. time_1 [A_1_0 B_1_0 C_1_0 K_1_0 c2_1_0 c5_1_0 c6_1_0 c7_1_0 c8_1_0 ch1_1_0 dK_dt_1_0 lam_1_1_0 lam_2_1_0 lam_3_1_0 r1_1_0 r2_1_0 r3_1_0 tau_1_0 v1_1_0 v3_1_0 v4_1_0 v5_1_0 v6_1_0 v7_1_0] flow_1)) (= mode_1 2) (forall_t 2 [0 time_1] (<= dK_dt_1_t 0)) (<= dK_dt_1_t 0) (<= dK_dt_1_0 0) (= mode_1 2) (= K_1_t 0) (= tau_1_t 1)))
(check-sat)
(exit)
