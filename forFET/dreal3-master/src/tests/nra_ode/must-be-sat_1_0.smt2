(set-logic QF_NRA_ODE)
(declare-fun t () Real [0.000000, 9.500000])
(declare-fun p () Real [0.600000, 0.700000])
(declare-fun t_0_0 () Real [0.000000, 9.500000])
(declare-fun t_0_t () Real [0.000000, 9.500000])
(declare-fun t_1_0 () Real [0.000000, 9.500000])
(declare-fun t_1_t () Real [0.000000, 9.500000])
(declare-fun p_0_0 () Real [0.600000, 0.700000])
(declare-fun p_0_t () Real [0.600000, 0.700000])
(declare-fun p_1_0 () Real [0.600000, 0.700000])
(declare-fun p_1_t () Real [0.600000, 0.700000])
(declare-fun time_0 () Real [0.000000, 10.000000])
(declare-fun time_1 () Real [0.000000, 10.000000])
(declare-fun mode_0 () Real [1.000000, 2.000000])
(declare-fun mode_1 () Real [1.000000, 2.000000])
(define-ode flow_1 ((= d/dt[p] 1) (= d/dt[t] 1)))
(define-ode flow_2 ((= d/dt[p] 0) (= d/dt[t] 0)))
(assert (and (= mode_1 2) (and (= t_0_0 0) (= p_0_0 0.6353)) (= mode_0 1) (= t_0_t (+ t_0_0 time_0)) (= p_0_t (+ p_0_0 time_0)) (= [p_0_t t_0_t] (integral 0. time_0 [p_0_0 t_0_0] flow_1)) (= mode_0 1) (= mode_1 2) (= p_0_t p_1_0) (= t_0_t t_1_0) (= t_1_t (+ t_1_0 (* 0 time_1))) (= p_1_t (+ p_1_0 (* 0 time_1))) (= [p_1_t t_1_t] (integral 0. time_1 [p_1_0 t_1_0] flow_2)) (= mode_1 2) (forall_t 2 [0 time_1] (= p_1_t 0.7)) (= p_1_t 0.7) (= p_1_0 0.7) (forall_t 2 [0 time_1] (= t_1_t 0.0647)) (= t_1_t 0.0647) (= t_1_0 0.0647)))
(check-sat)
(exit)
