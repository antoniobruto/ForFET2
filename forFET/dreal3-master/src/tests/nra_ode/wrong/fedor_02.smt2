(set-logic QF_NRA_ODE)
(declare-fun x () Real)
(declare-fun tau () Real)
(declare-fun x_0_0 () Real)
(declare-fun x_0_t () Real)
(declare-fun x_1_0 () Real)
(declare-fun x_1_t () Real)
(declare-fun tau_0_0 () Real)
(declare-fun tau_0_t () Real)
(declare-fun tau_1_0 () Real)
(declare-fun tau_1_t () Real)
(declare-fun time_0 () Real)
(declare-fun time_1 () Real)
(declare-fun mode_0 () Real)
(declare-fun mode_1 () Real)
(define-ode flow_1 ((= d/dt[x] (* -1 x)) (= d/dt[tau] 10)))
(define-ode flow_2 ((= d/dt[x] (* -1 (- x 30))) (= d/dt[tau] 10)))
(assert (<= 0 x_0_0))
(assert (<= x_0_0 130))
(assert (<= 0 x_0_t))
(assert (<= x_0_t 130))
(assert (<= 0 x_1_0))
(assert (<= x_1_0 130))
(assert (<= 0 x_1_t))
(assert (<= x_1_t 130))
(assert (<= 0 tau_0_0))
(assert (<= tau_0_0 100))
(assert (<= 0 tau_0_t))
(assert (<= tau_0_t 100))
(assert (<= 0 tau_1_0))
(assert (<= tau_1_0 100))
(assert (<= 0 tau_1_t))
(assert (<= tau_1_t 100))
(assert (<= 0 time_0 [0.000000]))
(assert (<= time_0 100 [0.000000]))
(assert (<= 0 time_1 [0.000000]))
(assert (<= time_1 100 [0.000000]))
(assert (<= 1 mode_0))
(assert (<= mode_0 2))
(assert (<= 1 mode_1))
(assert (<= mode_1 2))
(assert (and
        (= tau_0_0 0)
        (<= x_0_0 30)
        (>= x_0_0 20)
        (= [x_0_t tau_0_t] (integral 0. time_0 [x_0_0 tau_0_0] flow_1))
        (forall_t 1 [0 time_0] (>= x_0_t 18))
        (>= x_0_0 18)
        (<= x_0_t 18)
        (= tau_1_0 tau_0_t)
        (= x_1_0 x_0_t)
        (= [x_1_t tau_1_t] (integral 0. time_1 [x_1_0 tau_1_0] flow_2))
        (forall_t 2 [0 time_1] (<= x_1_t 18))
        (forall_t 2 [0 time_1] (<= x_1_t 22))
        (<= x_1_0 22)
        (>= x_1_t 22)
        ))
(check-sat)
(exit)
